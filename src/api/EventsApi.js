/*
 * Klaviyo API (Beta)
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * OpenAPI spec version: 2022-09-07.pre
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient.js";

/**
* Events service.
* @module api/EventsApi
* @version 2022-09-07.pre
*/
export class EventsApi {
    apiClient

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {ApiClient#instance} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Create Event
     * Enqueue an event to be created. This creates an event asynchronously. On successful queueing, this returns a 202 status code with an empty body. A sucessful response does not guarantee the event was created successfully. If the event is malformed or does not abide by limits, the event will be rejected qith status code of 400.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} body Event to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createEvent = async (body) => {

    
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEvent");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Klaviyo-API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/events/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Get Event
     * Get a specific event by id&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;10/s&#x60;&lt;br&gt;Steady: &#x60;150/m&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.fieldsEvent For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
     * @param {Array.<module:model/String>} opts.fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
     * @param {Array.<module:model/String>} opts.fieldsProfile For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
     * @param {Array.<module:model/String>} opts.include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getEvent = async (id, opts) => {

    opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[event]': this.apiClient.buildCollectionParam(opts['fieldsEvent'], 'csv'),'fields[metric]': this.apiClient.buildCollectionParam(opts['fieldsMetric'], 'csv'),'fields[profile]': this.apiClient.buildCollectionParam(opts['fieldsProfile'], 'csv'),'include': this.apiClient.buildCollectionParam(opts['include'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Klaviyo-API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/events/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Get Event Metrics
     * Get a list of Metrics for an event&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getEventMetrics = async (id, opts) => {

    opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEventMetrics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[metric]': this.apiClient.buildCollectionParam(opts['fieldsMetric'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Klaviyo-API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/events/{id}/metrics/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Get Event Profiles
     * Get a list of Profiles for an event&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;
     * @param {<&vendorExtensions.x-jsdoc-type>} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.fieldsProfile For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getEventProfiles = async (id, opts) => {

    opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEventProfiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields[profile]': this.apiClient.buildCollectionParam(opts['fieldsProfile'], 'csv')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Klaviyo-API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/events/{id}/profiles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Get Event Relationships
     * Returns metric or profile relationships for a given event
     * @param {<&vendorExtensions.x-jsdoc-type>} id 
     * @param {<&vendorExtensions.x-jsdoc-type>} relatedResource 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getEventRelationships = async (id, relatedResource) => {

    
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEventRelationships");
      }
      // verify the required parameter 'relatedResource' is set
      if (relatedResource === undefined || relatedResource === null) {
        throw new Error("Missing the required parameter 'relatedResource' when calling getEventRelationships");
      }

      let pathParams = {
        'id': id,'related_resource': relatedResource
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Klaviyo-API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/events/{id}/relationships/{related_resource}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

    /**
     * Get Events
     * Paginated range queries over event timelines for all company events or for a specific metric.&lt;br&gt;&lt;br&gt;*Rate limits*:&lt;br&gt;Burst: &#x60;350/s&#x60;&lt;br&gt;Steady: &#x60;3500/m&#x60;
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.fieldsEvent For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
     * @param {Array.<module:model/String>} opts.fieldsMetric For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
     * @param {Array.<module:model/String>} opts.fieldsProfile For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering
     * @param {String} opts.filter For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#filtering&lt;br&gt;Allowed field(s)/operator(s):&lt;br&gt;&#x60;metric_id&#x60;: &#x60;equals&#x60;&lt;br&gt;&#x60;datetime&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;&lt;br&gt;&#x60;timestamp&#x60;: &#x60;greater-or-equal&#x60;, &#x60;greater-than&#x60;, &#x60;less-or-equal&#x60;, &#x60;less-than&#x60;
     * @param {Array.<module:model/String>} opts.include For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#relationships
     * @param {String} opts.pageCursor For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#pagination
     * @param {module:model/String} opts.sort For more information please visit https://developers.klaviyo.com/en/v2022-09-07.pre/reference/api-overview#sorting
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getEvents = async (opts) => {

    opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'fields[event]': this.apiClient.buildCollectionParam(opts['fieldsEvent'], 'csv'),'fields[metric]': this.apiClient.buildCollectionParam(opts['fieldsMetric'], 'csv'),'fields[profile]': this.apiClient.buildCollectionParam(opts['fieldsProfile'], 'csv'),'filter': opts['filter'],'include': this.apiClient.buildCollectionParam(opts['include'], 'csv'),'page[cursor]': opts['pageCursor'],'sort': opts['sort']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['Klaviyo-API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/api/events/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      ).then(function(response_and_data) {
          return response_and_data.data;
      });
    }

}